
import { Question } from '../types';

export const questions: Question[] = [
  // JavaScript - Fresher
  {
    id: 1,
    question: "What is the difference between 'let', 'const', and 'var' in JavaScript?",
    domain: "JavaScript",
    level: "fresher",
    correctAnswer: "var is function-scoped and can be redeclared, let is block-scoped and can be reassigned, const is block-scoped and cannot be reassigned",
    points: 10,
  },
  {
    id: 2,
    question: "Explain what is hoisting in JavaScript?",
    domain: "JavaScript",
    level: "fresher",
    correctAnswer: "Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope during compilation",
    points: 10,
  },
  {
    id: 3,
    question: "What are closures in JavaScript?",
    domain: "JavaScript",
    level: "fresher",
    correctAnswer: "A closure is a function that has access to variables in its outer scope even after the outer function has returned",
    points: 10,
  },
  {
    id: 21,
    question: "What is the difference between == and === in JavaScript?",
    domain: "JavaScript",
    level: "fresher",
    correctAnswer: "== performs type coercion and compares values, while === compares both value and type without coercion",
    points: 10,
  },
  {
    id: 22,
    question: "What are JavaScript data types?",
    domain: "JavaScript",
    level: "fresher",
    correctAnswer: "JavaScript has primitive types: string, number, boolean, undefined, null, symbol, bigint and non-primitive: object",
    points: 10,
  },

  // JavaScript - Experienced
  {
    id: 4,
    question: "Explain the event loop in JavaScript and how it handles asynchronous operations?",
    domain: "JavaScript",
    level: "experienced",
    correctAnswer: "The event loop is a mechanism that handles asynchronous operations by managing the call stack, callback queue, and microtask queue, ensuring non-blocking execution",
    points: 10,
  },
  {
    id: 5,
    question: "What is the difference between Promise.all() and Promise.allSettled()?",
    domain: "JavaScript",
    level: "experienced",
    correctAnswer: "Promise.all() fails fast if any promise rejects, while Promise.allSettled() waits for all promises to settle and returns results for all",
    points: 10,
  },
  {
    id: 26,
    question: "Explain prototypal inheritance in JavaScript?",
    domain: "JavaScript",
    level: "experienced",
    correctAnswer: "Prototypal inheritance allows objects to inherit properties and methods from other objects through the prototype chain",
    points: 10,
  },
  {
    id: 27,
    question: "What are generators in JavaScript and how do they work?",
    domain: "JavaScript",
    level: "experienced",
    correctAnswer: "Generators are functions that can be paused and resumed, they use function* syntax and yield keyword to produce values on demand",
    points: 10,
  },
  {
    id: 28,
    question: "Explain the concept of currying in JavaScript?",
    domain: "JavaScript",
    level: "experienced",
    correctAnswer: "Currying is a technique of transforming a function with multiple arguments into a sequence of functions each taking a single argument",
    points: 10,
  },

  // Python - Fresher
  {
    id: 11,
    question: "What is the difference between list and tuple in Python?",
    domain: "Python",
    level: "fresher",
    correctAnswer: "Lists are mutable and use square brackets, while tuples are immutable and use parentheses",
    points: 10,
  },
  {
    id: 12,
    question: "Explain what is list comprehension in Python?",
    domain: "Python",
    level: "fresher",
    correctAnswer: "List comprehension is a concise way to create lists using a single line of code with optional conditions",
    points: 10,
  },
  {
    id: 39,
    question: "What are Python dictionaries and how do you use them?",
    domain: "Python",
    level: "fresher",
    correctAnswer: "Dictionaries are unordered collections of key-value pairs, accessed using keys in square brackets or get() method",
    points: 10,
  },
  {
    id: 40,
    question: "What is the difference between '==' and 'is' in Python?",
    domain: "Python",
    level: "fresher",
    correctAnswer: "'==' compares values for equality, while 'is' compares object identity (whether they are the same object in memory)",
    points: 10,
  },
  {
    id: 41,
    question: "What are Python functions and how do you define them?",
    domain: "Python",
    level: "fresher",
    correctAnswer: "Functions are reusable blocks of code defined using 'def' keyword, they can accept parameters and return values",
    points: 10,
  },

  // Python - Experienced
  {
    id: 13,
    question: "Explain the Global Interpreter Lock (GIL) in Python?",
    domain: "Python",
    level: "experienced",
    correctAnswer: "GIL is a mutex that prevents multiple threads from executing Python bytecodes simultaneously, limiting true parallelism in CPU-bound tasks",
    points: 10,
  },
  {
    id: 14,
    question: "What are decorators in Python and how do they work?",
    domain: "Python",
    level: "experienced",
    correctAnswer: "Decorators are functions that modify or extend the behavior of other functions without changing their code, using the @ syntax",
    points: 10,
  },
  {
    id: 45,
    question: "What are generators and iterators in Python?",
    domain: "Python",
    level: "experienced",
    correctAnswer: "Iterators are objects that implement __iter__ and __next__ methods, generators are functions that yield values and maintain state",
    points: 10,
  },
  {
    id: 46,
    question: "Explain metaclasses in Python?",
    domain: "Python",
    level: "experienced",
    correctAnswer: "Metaclasses are classes whose instances are classes themselves, they control how classes are created and behave",
    points: 10,
  },
  {
    id: 47,
    question: "What is the difference between shallow and deep copy?",
    domain: "Python",
    level: "experienced",
    correctAnswer: "Shallow copy creates new object but references to nested objects, deep copy creates completely independent copy of object and all nested objects",
    points: 10,
  },

  // Java - Fresher
  {
    id: 100,
    question: "What is the difference between JDK, JRE, and JVM?",
    domain: "Java",
    level: "fresher",
    correctAnswer: "JDK is development kit with tools, JRE is runtime environment for executing Java apps, JVM is virtual machine that executes bytecode",
    points: 10,
  },
  {
    id: 101,
    question: "What are the main principles of Object-Oriented Programming in Java?",
    domain: "Java",
    level: "fresher",
    correctAnswer: "The four main principles are Encapsulation, Inheritance, Polymorphism, and Abstraction",
    points: 10,
  },
  {
    id: 102,
    question: "What is the difference between String, StringBuffer, and StringBuilder?",
    domain: "Java",
    level: "fresher",
    correctAnswer: "String is immutable, StringBuffer is mutable and thread-safe, StringBuilder is mutable but not thread-safe",
    points: 10,
  },
  {
    id: 103,
    question: "What are access modifiers in Java?",
    domain: "Java",
    level: "fresher",
    correctAnswer: "Access modifiers are public (accessible everywhere), private (same class only), protected (same package and subclasses), default (same package)",
    points: 10,
  },
  {
    id: 104,
    question: "What is the difference between abstract class and interface?",
    domain: "Java",
    level: "fresher",
    correctAnswer: "Abstract class can have concrete methods and constructors, interface can only have abstract methods (before Java 8) and constants",
    points: 10,
  },

  // Java - Experienced
  {
    id: 105,
    question: "Explain the Java Memory Model and garbage collection?",
    domain: "Java",
    level: "experienced",
    correctAnswer: "Java Memory Model defines how threads interact through memory, garbage collection automatically manages memory by removing unreferenced objects",
    points: 10,
  },
  {
    id: 106,
    question: "What are Java 8 features and lambda expressions?",
    domain: "Java",
    level: "experienced",
    correctAnswer: "Java 8 introduced lambda expressions, streams, optional, method references, and default methods in interfaces for functional programming",
    points: 10,
  },
  {
    id: 107,
    question: "Explain multithreading and synchronization in Java?",
    domain: "Java",
    level: "experienced",
    correctAnswer: "Multithreading allows concurrent execution, synchronization prevents race conditions using synchronized keyword, locks, and atomic classes",
    points: 10,
  },
  {
    id: 108,
    question: "What are design patterns and which ones are commonly used in Java?",
    domain: "Java",
    level: "experienced",
    correctAnswer: "Design patterns are reusable solutions to common problems, common ones include Singleton, Factory, Observer, Builder, and MVC patterns",
    points: 10,
  },
  {
    id: 109,
    question: "Explain Spring Framework and its core concepts?",
    domain: "Java",
    level: "experienced",
    correctAnswer: "Spring is a framework providing dependency injection, aspect-oriented programming, and comprehensive infrastructure support for Java applications",
    points: 10,
  },

  // C++ - Fresher
  {
    id: 200,
    question: "What is the difference between C and C++?",
    domain: "C++",
    level: "fresher",
    correctAnswer: "C is procedural language, C++ is object-oriented with classes, inheritance, polymorphism, and additional features like templates",
    points: 10,
  },
  {
    id: 201,
    question: "What are pointers in C++ and how are they used?",
    domain: "C++",
    level: "fresher",
    correctAnswer: "Pointers are variables that store memory addresses of other variables, used for dynamic memory allocation and efficient data manipulation",
    points: 10,
  },
  {
    id: 202,
    question: "What is the difference between stack and heap memory?",
    domain: "C++",
    level: "fresher",
    correctAnswer: "Stack memory is automatic and fast for local variables, heap memory is manual dynamic allocation for larger data structures",
    points: 10,
  },
  {
    id: 203,
    question: "What are classes and objects in C++?",
    domain: "C++",
    level: "fresher",
    correctAnswer: "Classes are blueprints defining data members and member functions, objects are instances of classes with actual memory allocation",
    points: 10,
  },
  {
    id: 204,
    question: "What is inheritance in C++?",
    domain: "C++",
    level: "fresher",
    correctAnswer: "Inheritance allows a class to inherit properties and methods from another class, promoting code reusability and hierarchical relationships",
    points: 10,
  },

  // C++ - Experienced
  {
    id: 205,
    question: "Explain virtual functions and polymorphism in C++?",
    domain: "C++",
    level: "experienced",
    correctAnswer: "Virtual functions enable runtime polymorphism through dynamic binding, allowing derived classes to override base class methods",
    points: 10,
  },
  {
    id: 206,
    question: "What are templates in C++ and how do they work?",
    domain: "C++",
    level: "experienced",
    correctAnswer: "Templates enable generic programming by allowing functions and classes to work with any data type, resolved at compile time",
    points: 10,
  },
  {
    id: 207,
    question: "Explain RAII and smart pointers in modern C++?",
    domain: "C++",
    level: "experienced",
    correctAnswer: "RAII ties resource management to object lifetime, smart pointers like unique_ptr and shared_ptr provide automatic memory management",
    points: 10,
  },
  {
    id: 208,
    question: "What are move semantics and perfect forwarding?",
    domain: "C++",
    level: "experienced",
    correctAnswer: "Move semantics optimize performance by transferring resources instead of copying, perfect forwarding preserves value categories in templates",
    points: 10,
  },
  {
    id: 209,
    question: "Explain the Standard Template Library (STL)?",
    domain: "C++",
    level: "experienced",
    correctAnswer: "STL provides containers, algorithms, and iterators as a comprehensive library for common data structures and operations",
    points: 10,
  },

  // C# - Fresher
  {
    id: 300,
    question: "What is the .NET Framework and how does C# relate to it?",
    domain: "C#",
    level: "fresher",
    correctAnswer: ".NET Framework provides runtime and libraries for executing applications, C# is a programming language that compiles to intermediate language for .NET",
    points: 10,
  },
  {
    id: 301,
    question: "What are value types and reference types in C#?",
    domain: "C#",
    level: "fresher",
    correctAnswer: "Value types store data directly and are stored on stack, reference types store references to data on heap",
    points: 10,
  },
  {
    id: 302,
    question: "What is the difference between classes and structures in C#?",
    domain: "C#",
    level: "fresher",
    correctAnswer: "Classes are reference types with inheritance support, structures are value types without inheritance, typically for simple data",
    points: 10,
  },
  {
    id: 303,
    question: "What are properties in C# and how are they different from fields?",
    domain: "C#",
    level: "fresher",
    correctAnswer: "Properties provide controlled access to private fields using get and set accessors, enabling encapsulation and validation",
    points: 10,
  },
  {
    id: 304,
    question: "What is garbage collection in C#?",
    domain: "C#",
    level: "fresher",
    correctAnswer: "Garbage collection automatically manages memory by removing unreferenced objects, preventing memory leaks in managed code",
    points: 10,
  },

  // C# - Experienced
  {
    id: 305,
    question: "Explain async/await and Task-based programming in C#?",
    domain: "C#",
    level: "experienced",
    correctAnswer: "async/await enables asynchronous programming without blocking threads, Task represents asynchronous operations with better performance",
    points: 10,
  },
  {
    id: 306,
    question: "What are delegates, events, and lambda expressions?",
    domain: "C#",
    level: "experienced",
    correctAnswer: "Delegates are type-safe function pointers, events provide notifications, lambda expressions are anonymous functions for concise code",
    points: 10,
  },
  {
    id: 307,
    question: "Explain LINQ and its benefits in C#?",
    domain: "C#",
    level: "experienced",
    correctAnswer: "LINQ provides unified query syntax for different data sources, enabling declarative data manipulation with strong typing",
    points: 10,
  },
  {
    id: 308,
    question: "What are generics and how do they improve type safety?",
    domain: "C#",
    level: "experienced",
    correctAnswer: "Generics allow classes and methods to work with any type while maintaining type safety, reducing code duplication and boxing",
    points: 10,
  },
  {
    id: 309,
    question: "Explain dependency injection and its implementation in .NET?",
    domain: "C#",
    level: "experienced",
    correctAnswer: "Dependency injection provides loose coupling by injecting dependencies rather than creating them, improving testability and maintainability",
    points: 10,
  },

  // Go - Fresher
  {
    id: 400,
    question: "What are the key features of Go programming language?",
    domain: "Go",
    level: "fresher",
    correctAnswer: "Go features simplicity, fast compilation, garbage collection, built-in concurrency with goroutines, and strong typing",
    points: 10,
  },
  {
    id: 401,
    question: "What are goroutines and how do they work?",
    domain: "Go",
    level: "fresher",
    correctAnswer: "Goroutines are lightweight threads managed by Go runtime, enabling concurrent execution with minimal memory overhead",
    points: 10,
  },
  {
    id: 402,
    question: "What are channels in Go and their purpose?",
    domain: "Go",
    level: "fresher",
    correctAnswer: "Channels are typed conduits for communication between goroutines, following the principle 'don't communicate by sharing memory, share memory by communicating'",
    points: 10,
  },
  {
    id: 403,
    question: "What is the difference between slices and arrays in Go?",
    domain: "Go",
    level: "fresher",
    correctAnswer: "Arrays have fixed size and are value types, slices are dynamic views over arrays with variable length and are reference types",
    points: 10,
  },
  {
    id: 404,
    question: "How does error handling work in Go?",
    domain: "Go",
    level: "fresher",
    correctAnswer: "Go uses explicit error handling by returning error as second value from functions, following if err != nil pattern",
    points: 10,
  },

  // Go - Experienced
  {
    id: 405,
    question: "Explain interfaces in Go and their empty interface concept?",
    domain: "Go",
    level: "experienced",
    correctAnswer: "Interfaces define method sets, implemented implicitly. Empty interface interface{} can hold any type, similar to Object in other languages",
    points: 10,
  },
  {
    id: 406,
    question: "What are Go modules and how do they manage dependencies?",
    domain: "Go",
    level: "experienced",
    correctAnswer: "Go modules provide dependency management with go.mod files, enabling version control and reproducible builds",
    points: 10,
  },
  {
    id: 407,
    question: "Explain reflection in Go and when to use it?",
    domain: "Go",
    level: "experienced",
    correctAnswer: "Reflection allows inspecting types and values at runtime using reflect package, useful for generic programming but should be used sparingly",
    points: 10,
  },
  {
    id: 408,
    question: "What are context and its usage in Go applications?",
    domain: "Go",
    level: "experienced",
    correctAnswer: "Context carries deadlines, cancellation signals, and request-scoped values across API boundaries for better control flow",
    points: 10,
  },
  {
    id: 409,
    question: "How does memory management work in Go?",
    domain: "Go",
    level: "experienced",
    correctAnswer: "Go uses garbage collection with tri-color concurrent mark-and-sweep algorithm, automatic memory management with escape analysis",
    points: 10,
  },

  // Rust - Fresher
  {
    id: 500,
    question: "What is ownership in Rust and why is it important?",
    domain: "Rust",
    level: "fresher",
    correctAnswer: "Ownership is Rust's system for memory safety without garbage collection, ensuring each value has exactly one owner at a time",
    points: 10,
  },
  {
    id: 501,
    question: "What are the differences between borrowing and ownership?",
    domain: "Rust",
    level: "fresher",
    correctAnswer: "Ownership transfers value control, borrowing creates references without transferring ownership, enabling safe access without moves",
    points: 10,
  },
  {
    id: 502,
    question: "What are mutable and immutable references in Rust?",
    domain: "Rust",
    level: "fresher",
    correctAnswer: "Immutable references allow read-only access and can have multiple, mutable references allow write access but only one at a time",
    points: 10,
  },
  {
    id: 503,
    question: "What is the Result type and how is error handling done?",
    domain: "Rust",
    level: "fresher",
    correctAnswer: "Result<T, E> represents either success (Ok) or failure (Err), providing explicit error handling without exceptions",
    points: 10,
  },
  {
    id: 504,
    question: "What are structs and enums in Rust?",
    domain: "Rust",
    level: "fresher",
    correctAnswer: "Structs group related data fields, enums define types with multiple variants, both supporting methods and pattern matching",
    points: 10,
  },

  // Rust - Experienced
  {
    id: 505,
    question: "Explain lifetimes in Rust and their purpose?",
    domain: "Rust",
    level: "experienced",
    correctAnswer: "Lifetimes ensure references are valid for required duration, preventing dangling pointers and memory safety violations at compile time",
    points: 10,
  },
  {
    id: 506,
    question: "What are traits and how do they enable polymorphism?",
    domain: "Rust",
    level: "experienced",
    correctAnswer: "Traits define shared behavior across types, enabling static dispatch polymorphism and code reuse through implementation",
    points: 10,
  },
  {
    id: 507,
    question: "Explain unsafe Rust and when it should be used?",
    domain: "Rust",
    level: "experienced",
    correctAnswer: "Unsafe Rust bypasses borrow checker for performance or interoperability, should be used minimally with careful manual verification",
    points: 10,
  },
  {
    id: 508,
    question: "What are closures and how do they capture variables?",
    domain: "Rust",
    level: "experienced",
    correctAnswer: "Closures are anonymous functions that can capture variables by value, reference, or mutable reference from enclosing scope",
    points: 10,
  },
  {
    id: 509,
    question: "Explain concurrency in Rust with threads and async/await?",
    domain: "Rust",
    level: "experienced",
    correctAnswer: "Rust provides safe concurrency through ownership system, supporting both traditional threads and async/await for cooperative multitasking",
    points: 10,
  },

  // Swift - Fresher
  {
    id: 600,
    question: "What are optionals in Swift and why are they important?",
    domain: "Swift",
    level: "fresher",
    correctAnswer: "Optionals represent values that might be nil, providing type safety by explicitly handling absence of values",
    points: 10,
  },
  {
    id: 601,
    question: "What is the difference between var and let in Swift?",
    domain: "Swift",
    level: "fresher",
    correctAnswer: "var declares mutable variables that can be changed, let declares immutable constants that cannot be modified after initialization",
    points: 10,
  },
  {
    id: 602,
    question: "What are classes and structures in Swift?",
    domain: "Swift",
    level: "fresher",
    correctAnswer: "Classes are reference types with inheritance, structs are value types without inheritance, both can have properties and methods",
    points: 10,
  },
  {
    id: 603,
    question: "What is optional binding and unwrapping?",
    domain: "Swift",
    level: "fresher",
    correctAnswer: "Optional binding safely extracts values from optionals using if let or guard let, unwrapping accesses the underlying value",
    points: 10,
  },
  {
    id: 604,
    question: "What are protocols in Swift?",
    domain: "Swift",
    level: "fresher",
    correctAnswer: "Protocols define blueprints of methods and properties that types can adopt, similar to interfaces in other languages",
    points: 10,
  },

  // Swift - Experienced
  {
    id: 605,
    question: "Explain memory management and ARC in Swift?",
    domain: "Swift",
    level: "experienced",
    correctAnswer: "ARC (Automatic Reference Counting) manages memory by tracking references, automatically deallocating objects when reference count reaches zero",
    points: 10,
  },
  {
    id: 606,
    question: "What are closures and how do they capture values?",
    domain: "Swift",
    level: "experienced",
    correctAnswer: "Closures are self-contained blocks of functionality that can capture and store references to variables from surrounding context",
    points: 10,
  },
  {
    id: 607,
    question: "Explain generics in Swift and their benefits?",
    domain: "Swift",
    level: "experienced",
    correctAnswer: "Generics enable writing flexible, reusable code that works with any type while maintaining type safety and performance",
    points: 10,
  },
  {
    id: 608,
    question: "What are property observers and computed properties?",
    domain: "Swift",
    level: "experienced",
    correctAnswer: "Property observers (willSet, didSet) respond to property changes, computed properties calculate values dynamically without storage",
    points: 10,
  },
  {
    id: 609,
    question: "Explain SwiftUI and its declarative approach?",
    domain: "Swift",
    level: "experienced",
    correctAnswer: "SwiftUI is declarative framework for building user interfaces by describing what UI should look like rather than how to build it",
    points: 10,
  },

  // Kotlin - Fresher
  {
    id: 700,
    question: "What are the main advantages of Kotlin over Java?",
    domain: "Kotlin",
    level: "fresher",
    correctAnswer: "Kotlin offers null safety, concise syntax, extension functions, data classes, and full Java interoperability",
    points: 10,
  },
  {
    id: 701,
    question: "What is null safety in Kotlin?",
    domain: "Kotlin",
    level: "fresher",
    correctAnswer: "Null safety prevents null pointer exceptions by distinguishing nullable and non-nullable types at compile time",
    points: 10,
  },
  {
    id: 702,
    question: "What are data classes in Kotlin?",
    domain: "Kotlin",
    level: "fresher",
    correctAnswer: "Data classes automatically generate equals, hashCode, toString, and copy methods for classes primarily holding data",
    points: 10,
  },
  {
    id: 703,
    question: "What is the difference between val and var?",
    domain: "Kotlin",
    level: "fresher",
    correctAnswer: "val declares immutable references (read-only), var declares mutable references that can be reassigned",
    points: 10,
  },
  {
    id: 704,
    question: "What are extension functions in Kotlin?",
    domain: "Kotlin",
    level: "fresher",
    correctAnswer: "Extension functions add new functionality to existing classes without modifying their source code or using inheritance",
    points: 10,
  },

  // Kotlin - Experienced
  {
    id: 705,
    question: "Explain coroutines in Kotlin and their benefits?",
    domain: "Kotlin",
    level: "experienced",
    correctAnswer: "Coroutines provide lightweight concurrency, enabling asynchronous programming with sequential code style and structured concurrency",
    points: 10,
  },
  {
    id: 706,
    question: "What are higher-order functions and lambda expressions?",
    domain: "Kotlin",
    level: "experienced",
    correctAnswer: "Higher-order functions take functions as parameters or return functions, lambda expressions are anonymous functions for functional programming",
    points: 10,
  },
  {
    id: 707,
    question: "Explain sealed classes and their use cases?",
    domain: "Kotlin",
    level: "experienced",
    correctAnswer: "Sealed classes restrict inheritance to predefined subclasses, useful for representing restricted class hierarchies and state management",
    points: 10,
  },
  {
    id: 708,
    question: "What is the difference between object and class in Kotlin?",
    domain: "Kotlin",
    level: "experienced",
    correctAnswer: "object creates singleton instances directly, class defines blueprints for creating multiple instances through constructors",
    points: 10,
  },
  {
    id: 709,
    question: "Explain delegation patterns in Kotlin?",
    domain: "Kotlin",
    level: "experienced",
    correctAnswer: "Kotlin supports delegation through 'by' keyword for class delegation and property delegation, promoting composition over inheritance",
    points: 10,
  },

  // React - Fresher
  {
    id: 6,
    question: "What is JSX in React?",
    domain: "React",
    level: "fresher",
    correctAnswer: "JSX is a syntax extension for JavaScript that allows writing HTML-like syntax in React components",
    points: 10,
  },
  {
    id: 7,
    question: "What is the difference between state and props in React?",
    domain: "React",
    level: "fresher",
    correctAnswer: "State is internal component data that can change, while props are external data passed from parent components and are read-only",
    points: 10,
  },
  {
    id: 8,
    question: "What are React Hooks?",
    domain: "React",
    level: "fresher",
    correctAnswer: "Hooks are functions that allow functional components to use state and lifecycle methods previously only available in class components",
    points: 10,
  },
  {
    id: 30,
    question: "What is the useState hook and how do you use it?",
    domain: "React",
    level: "fresher",
    correctAnswer: "useState is a hook that adds state to functional components, it returns an array with current state value and a setter function",
    points: 10,
  },
  {
    id: 31,
    question: "What is the useEffect hook used for?",
    domain: "React",
    level: "fresher",
    correctAnswer: "useEffect is used for side effects in functional components, like data fetching, subscriptions, or manually changing the DOM",
    points: 10,
  },

  // React - Experienced
  {
    id: 9,
    question: "Explain the concept of React reconciliation and the virtual DOM?",
    domain: "React",
    level: "experienced",
    correctAnswer: "Reconciliation is React's process of comparing virtual DOM trees to efficiently update the real DOM by identifying minimal changes needed",
    points: 10,
  },
  {
    id: 10,
    question: "What are higher-order components (HOCs) and when would you use them?",
    domain: "React",
    level: "experienced",
    correctAnswer: "HOCs are functions that take a component and return a new component with additional props or behavior, used for code reuse and cross-cutting concerns",
    points: 10,
  },
  {
    id: 35,
    question: "What is React Context and when should you use it?",
    domain: "React",
    level: "experienced",
    correctAnswer: "React Context provides a way to pass data through component tree without prop drilling, used for global state like themes, authentication",
    points: 10,
  },
  {
    id: 37,
    question: "What is the difference between useMemo and useCallback?",
    domain: "React",
    level: "experienced",
    correctAnswer: "useMemo memoizes computed values to avoid expensive calculations, useCallback memoizes functions to prevent unnecessary re-renders",
    points: 10,
  },
  {
    id: 38,
    question: "What are render props in React?",
    domain: "React",
    level: "experienced",
    correctAnswer: "Render props is a pattern where a component receives a function as a prop that returns React elements, enabling code sharing",
    points: 10,
  },
];

export const domains = [
  "JavaScript", "Python", "Java", "C++", "C#", "Go", "Rust", "Swift", "Kotlin", "React"
];

export const levels = ["fresher", "experienced"] as const;
